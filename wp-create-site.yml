# ------------------------------------------------------------------------------
# create-wordpress-site.yml
# ------------------------------------------------------------------------------

# Creates a WordPress site using our default architecture for WordPress sites:
#  - MariaDB database
#  - Apache with the PHP module as a combined web and application layer
#  - A reverse proxy front-end based on Nginx

---

- hosts: wordpress

  tasks:

    - ansible.builtin.import_role:
        name: wordpress
        tasks_from: site-action-precursors
      tags: always

    - ansible.builtin.import_role:
        name: dns_api
        tasks_from: create-or-update-wp-site-records
      delegate_to: gateway
      when: "'external' in group_names"
      tags: dns

    - ansible.builtin.import_role:
        name: database
        tasks_from: create-site
        handlers_from: none
      # By default the database is co-hosted with WordPress web and application
      # layer. However, if wp_database_host is defined then it will be installed
      # remote from the web and application layer on that host.
      delegate_to: "{{ wp_database_host | default(inventory_hostname) }}"
      tags: database

    - ansible.builtin.import_role:
        name: wordpress
        tasks_from: create-site
      tags: wordpress

    - ansible.builtin.import_role:
        name: wordpress_apache
        tasks_from: create-site
      tags: webserver

    - ansible.builtin.import_role:
        name: reverse_proxy
        tasks_from: create-site
      # By default the reverse proxy is co-hosted with WordPress web and
      # application layer. However, if wp_database_host is defined then it will
      # be installed remote from the web and application layer on that host.
      delegate_to: "{{ wp_reverse_proxy_host | default(inventory_hostname) }}"
      tags: proxy

- hosts: hub

  tasks:

    - ansible.builtin.import_role:
        name: dns
        tasks_from: create-record
      vars:
        dns_record_hostname: "{{ hostvars[dns_record_target].wp_server_name }}"
        dns_record_target: "\
          {{ groups['wordpress'] | intersect(ansible_limit) | first }}"
        dns_record_type: project
      when: "'internal' in group_names"
      tags: dns

- hosts: gateway

  # Configure a Dynamic DNS record for the website, since it is hosted on the
  # office network but exposed externally to customer users.  

  tasks:

    - ansible.builtin.import_role:
        name: dynamic_dns
        tasks_from: create-record
      vars:
        wp_host: "{{ groups['wordpress'] | intersect(ansible_limit) | first }}"
        dynamic_dns_record_hostname: "{{ hostvars[wp_host].wp_subdomain }}"
      when: linode_domain_id is defined
      tags: dns
